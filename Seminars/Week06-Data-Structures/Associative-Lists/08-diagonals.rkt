#lang racket

(define (at m i)
  (if (zero? i)
      (car m)
      (at (cdr m) (- i 1))
      )
  )

(define (main-diagonal m len)
  (define (iter i j lst)
    (if (= i len)
        (reverse lst)
        (iter (+ i 1) (+ j 1) (cons (at (at m i) j) lst))
        )
    )
  (iter 0 0 `())
  )

(define (second-diagonal m len)
  (define (iter i j lst)
    (if (= i len)
        (reverse lst)
        (iter (+ i 1) (- j 1) (cons (at (at m i) j) lst))
        )
    )
  (iter 0 (- (length m) 1) `())
  )

(define (diagonals xss)
  (let ([len (length xss)])
    (cons (main-diagonal xss len) (second-diagonal xss len))
    )
  )

(diagonals '((1 2 3) (4 5 6) (7 8 9)))
(equal? (diagonals '((1 2 3) (4 5 6) (7 8 9))) '((1 5 9) . (3 5 7)))
(equal? (diagonals '((10 20) (30 40))) '((10 40) . (20 30)))
(equal? (diagonals '((1 2 3 4) (5 6 7 8) (9 10 11 12))) '((1 6 11) . (4 6 9)))
(equal? (diagonals '((100))) '((100) . (100)))